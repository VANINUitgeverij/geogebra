project.description = 'GeoGebra'



buildscript {
	repositories {
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath 'net.researchgate:gradle-release:2.4.0'
	}
}

apply plugin: 'net.researchgate.release'


allprojects {
	apply plugin: 'maven'

	group = 'geogebra'
	version = version

}

subprojects {
	apply plugin: 'eclipse'
	apply plugin: 'java'

	repositories {
		maven {
			url 'http://dev.geogebra.org/maven2'
		}
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
		mavenCentral()
    }


	eclipse.project {
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}

	// add auto formatter to every project
	task eclipseJdtPrepare(type: Copy) {
		description 'Copies Eclipse jdt.core preference file.'
		from rootProject.file('eclipse/org.eclipse.jdt.core.prefs')
		into project.file('.settings/')
		outputs.upToDateWhen { false }
	}

	task eclipseJdtUi(type: Copy) {
		description 'Copies Eclipse jdt.ui preference file.'
		from rootProject.file('eclipse/org.eclipse.jdt.ui.prefs')
		into project.file('.settings/')
		outputs.upToDateWhen { false }
	}

	task cleanEclipseJdtUi(type: Delete) {
		description 'Cleans Eclipse jdt.ui preference file.'
		delete project.file('.settings/org.eclipse.jdt.ui.prefs')
	}

	tasks['eclipseJdt'].dependsOn(eclipseJdtPrepare)
	tasks['cleanEclipse'].dependsOn(cleanEclipseJdtUi)
	tasks['eclipse'].dependsOn(eclipseJdtPrepare, eclipseJdtUi, cleanEclipse)

	uploadArchives {
		repositories {
			mavenDeployer {
				snapshotRepository(id: 'diddit-snapshot', url: EBIT_NEXUS_DIDDIT_SNAPSHOT_URL) {
					authentication(userName: EBIT_NEXUS_USER, password: EBIT_NEXUS_PASSWORD)
				}
				repository(id: 'diddit-release', url: EBIT_NEXUS_DIDDIT_RELEASE_URL) {
					authentication(userName: EBIT_NEXUS_USER, password: EBIT_NEXUS_PASSWORD)
				}
			}
		}
	}

	afterReleaseBuild.dependsOn uploadArchives
}

task wrapper(type: Wrapper) {
	description = 'Creates the gradle wrapper'
	gradleVersion = '2.13'
}

// eclipse related tasks
project(':common') {
	
	cleanEclipse.dependsOn('cleanJavacc')
	eclipseClasspath.dependsOn('compileJavacc')

	eclipse.project {
 		natures 'sf.eclipse.javacc.javaccnature'
	}
}

project(':web') {
	// exclude from the eclipse classpath the java files in the resources dir
	eclipse.classpath.file { 
		whenMerged { classpath ->
			classpath.entries.find { entry -> entry.kind == 'src' && entry.path == 'src/main/resources' }.excludes = ['**/*.java']
		}
	}
}

ext.joglVersion = '2.2.0'

// This is automatically updated when there is a new version of Giac out:
ext.javaGiacVersion = '49076'
// Please don't change this line since the automatism looks for exact match.


task dist(dependsOn:':desktop:build') {

}

release {

	git {
		requireBranch = 'diddit'
		pushToRemote = 'origin'
	}

}